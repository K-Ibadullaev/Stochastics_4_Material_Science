display(EBImage::opening(img, brush ), method = "raster")
#Morphological opening
brush = makeBrush(size=100, shape='disc')
display(brush)
display(EBImage::opening(img, brush ), method = "raster")
#Morphological opening
brush = makeBrush(size=18, shape='disc')
display(brush)
display(EBImage::opening(img, brush ), method = "raster")
#Morphological opening
brush = makeBrush(size=15, shape='disc')
display(brush)
display(EBImage::opening(img, brush ), method = "raster")
setwd("C:/Users/Anaconda/Rscripts/StoMe")
# Load contributed R package 'bitops':
require(bitops)
# Load contributed R package 'bitops':
require(bitops)
# Load contributed R package 'EBImage':
require(EBImage)
# Read an example image:
y2 <- readImage('example2.png')
display(y2, method="raster")
# In the following the set of white pixels of 'y2' plays the role of the first set A.
A <- y2
# 'makeBrush' may be used to generate typical structuring elements B like
# a square
makeBrush(size=3, shape='box')
makeBrush(size=5, shape='box')
# or a disc.
makeBrush(size=5, shape='disc')
display(makeBrush(size=15, shape='disc'), method="raster", interpolate=FALSE)
display(makeBrush(size=51, shape='disc'), method="raster", interpolate=FALSE)
B1 <- makeBrush(size=3, shape='disc') # disc of radius 1 pixel
B2 <- makeBrush(size=5, shape='disc') # disc of radius 2 pixels
# dilation / Minkowski sum
display(dilate(A, B1), method="raster", interpolate=FALSE)
display(dilate(A, B2), method="raster", interpolate=FALSE)
# erosion / Minkowski difference
display(erode(A, B1), method="raster", interpolate=FALSE)
display(erode(A, B2), method="raster", interpolate=FALSE)
# morphological opening (white holes in the black phase are reduced or filled)
display(opening(A, B1), method="raster", interpolate=FALSE)
# morphological opening (white holes in the black phase are reduced or filled)
display(EBImage::opening(A, B1), method="raster", interpolate=FALSE)
display(A, method="raster")
# morphological opening (white holes in the black phase are reduced or filled)
display(EBImage::opening(A, B1), method="raster", interpolate=FALSE)
display(EBImage::opening(A, B2), method="raster", interpolate=FALSE)
#load image
img = readImage("image1_03.png")
display(img, method = "raster")
#Morphological opening
brush = makeBrush(size=15, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
#Morphological opening
brush = makeBrush(size=21, shape='disc',interpolate=F)
?opening
#Morphological opening
px = 1
while (px<100){
brush = makeBrush(size=px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
px = (px+2)*10
}
for (px in seq(1:100,3)){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
px = (px+2)*10
}
for (px in seq(1:100:3)){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
px = (px+2)*10
}
?seq
for (px in c(seq(from = 1, to = 100, by = 3))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
px = (px+2)*10
}
warning()
warnings()
for (px in c(seq(from = 1, to = 100, by = 3))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
}
warnings()
for (px in c(seq(from = 1, to = 100, by = 11))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
}
for (px in c(seq(from = 1, to = 100, by = 20))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
}
for (px in c(seq(from = 1, to = 101, by = 15))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
}
for (px in c(seq(from = 1, to = 11, by = 3))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
}
for (px in c(seq(from = 1, to = 5, by = 1.1))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
}
for (px in c(seq(from = 1, to = 5, by = 1.1))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
for (px in c(seq(from = 1, to = 7, by = 0.9))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
for (px in c(seq(from = 1, to = 7, by = 0.9))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
for (px in c(seq(from = 1, to = 6, by = 0.3))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
?display()
for (px in c(seq(from = 1, to = 6, by = 0.1))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
for (px in c(seq(from = 1, to = 3, by = 0.3))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
pxl = 0.001
for (px in c(seq(from = 1, to = 6, by = 0.3))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
for (px in c(seq(from = 1, to = 6, by = 0.3))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
b =pxl *3.4
b
for (px in c(seq(from = 1, to = 6, by = 0.7))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
for (px in c(seq(from = 1, to = 6, by = 0.7))){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
b =pxl *3.1
pxl = 0.025
b =pxl *3.1
b
brush = makeBrush(size= b, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
brush = makeBrush(size= b/pxl, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
b =pxl *3.3
b
brush = makeBrush(size= b/pxl, shape='disc')
display(img, method = "raster")
display(EBImage::opening(img, brush ), method = "raster")
b =pxl *3.3
b
b =pxl *3.3
b
brush = makeBrush(size= b/pxl, shape='disc')
display(img, method = "raster")
display(EBImage::opening(img, brush ), method = "raster")
b =pxl *3.35
b
brush = makeBrush(size= b/pxl, shape='disc')
display(img, method = "raster")
display(EBImage::opening(img, brush ), method = "raster")
b =pxl *3.4
b
brush = makeBrush(size= b/pxl, shape='disc')
display(img, method = "raster")
display(EBImage::opening(img, brush ), method = "raster")
b =pxl *4.1
b
brush = makeBrush(size= b/pxl, shape='disc')
display(img, method = "raster")
display(EBImage::opening(img, brush ), method = "raster")
for (px in c(1, 2.1, 2.5,3.3,4.1,4.3,4.7)){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
for (px in c(1, 2.1, 2.5,3.3,4.1,4.3,4.7)){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
print(px)
}
brush = makeBrush(size= 3.9, shape='disc')
display(img, method = "raster")
display(EBImage::opening(img, brush ), method = "raster")
b =pxl *4.1
b
brush = makeBrush(size= b/pxl, shape='disc')
display(img, method = "raster")
display(EBImage::opening(img, brush ), method = "raster")
#Seems like value of b is between 10 and 11.
paste("Size of b is ", b)
#loop through possible vals of pix size of b
for (px in c(1, 2.1, 2.5,3.3,4.1,4.3,4.7)){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
writeImage(paste("img ", px*pxl,".png"))
print(px)
}
setwd("C:/Users/Anaconda/Rscripts/StoMe/project/t2")
source("fcts.r")
library(EBImage)
library(spatstat)
library(bitops)
#load image
img = readImage("image1_03.png")
display(img, method = "raster")
pxl = 0.025 #pixel length
#loop through possible vals of pix size of b
for (px in c(1, 2.1, 2.5,3.3,4.1,4.3,4.7)){
brush = makeBrush(size= px, shape='disc')
display(EBImage::opening(img, brush ), method = "raster")
writeImage(paste("img ", px*pxl,".png"))
print(px)
}
?writeImage()
#loop through possible vals of pix size of b
for (px in c(1, 2.1, 2.5,3.3,4.1,4.3,4.7)){
brush = makeBrush(size= px, shape='disc')
i = EBImage::opening(img, brush )
display(i,  method = "raster")
writeImage(i,paste("img ", px*pxl,".png"))
print(px)
}
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys( M1, spacing=0.0025)
img.M1 = digitizeRectSys( M1, spacing=0.0025)
display(img.M1,method = "raster")
M2 = rBM.rect.const(lambda = 5.1,a = 1.98, b = 0.11)
img.M2 = digitizeRectSys( M2, spacing=0.0025)
display(img.M2,method = "raster")
source("fcts.r")
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys( M1, spacing=0.025)
display(img.M1,method = "raster")
M2 = rBM.rect.const(lambda = 5.1,a = 1.98, b = 0.11)
img.M2 = digitizeRectSys( M2, spacing=0.025)
display(img.M2,method = "raster")
source("fcts.r")
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys( M1, spacing=0.025)
display(img.M1,method = "raster")
M2 = rBM.rect.const(lambda = 5.1,a = 1.98, b = 0.11)
img.M2 = digitizeRectSys( M2, spacing=0.025)
display(img.M2,method = "raster")
source("fcts.r")
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys( M1, spacing=0.025)
display(img.M1,method = "raster")
M2 = rBM.rect.const(lambda = 5.1,a = 1.98, b = 0.11)
img.M2 = digitizeRectSys( M2, spacing=0.025)
display(img.M2,method = "raster")
M1.ALX = estALXFct(BW = M1,spacing = 0.025)
M1.ALX
M1.ALX = estALXFct(BW = M1,spacing = 1)
M1.ALX
M1.ALX = estALXFct(BW=M1, m=999, spacing=0.025, ms=TRUE)
M1.ALX = estALXFct(BW=M1, m=999, spacing=0.025, ms=TRUE)
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys( M1, spacing=0.025)
display(img.M1,method = "raster")
M1.ALX = estALXFct(BW=M1, m=999, spacing=0.025, ms=TRUE)
M1.ALX = estALXFct(BW=img.M1, m=999, spacing=0.025, ms=TRUE)
M1.ALX
M1.ALX = estALXFct(BW=img.M1, m=999, spacing=1, ms=TRUE)
M1.ALX
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys( M1, spacing=0.025)
display(img.M1,method = "raster")
M2 = rBM.rect.const(lambda = 5.1,a = 1.98, b = 0.11)
img.M2 = digitizeRectSys( M2, spacing=0.025)
display(img.M2,method = "raster")
M1.ALX = estALXFct(BW=img.M1, m=999, spacing=1, ms=TRUE)
M1.ALX = estALXFct(BW=img.M1, m=99, spacing=1, ms=TRUE)
M1.ALX
M1.ALX = estALXFct(BW=img.M1, m=9, spacing=0.025, ms=TRUE)
M1.ALX
M1.ALX = estALXFct(BW=img.M1, m=999, spacing=0.025, ms=TRUE)
M1.ALX = estALXFct(BW=img.M1, m=100, spacing=0.025, ms=TRUE)
M1.ALX
M1.ALX = estALXFct(BW=img.M1, m=100, spacing=0.025, ms=F)
M1.ALX = estALXFct(BW=img.M1, m=10, spacing=0.025, ms=F)
M1.ALX
#Minkowski functions
M1.ALX = estALXFct(BW=img.M1, m=10, spacing=0.025, ms=T)
M1.ALX
M2.ALX = estALXFct(BW=img.M2, m=10, spacing=0.025, ms=T)
M2.ALX
source("fcts.r")
library(EBImage)
library(spatstat)
library(bitops)
model = rMatern3Radii(lambda = 5,R = 0.5,box = 10)
L5 = rM3.disc.const(lambda = 5,R = 0.5, W = owin(c(0,1),c(0,1)) )
L5 = rM3.disc.const(lambda = 5,R = 0.05, W = owin(c(0,1),c(0,1)) )
BW.L5 = digitizeDiscSys(L5,spacing = 0.025)
display(BW.L5)
display(BW.L5, method = "raster")
L5 = rM3.disc.const(lambda = 5,R = 0.05, W = owin(c(0,10),c(0,10)) )
BW.L5 = digitizeDiscSys(L5,spacing = 0.025)
display(BW.L5, method = "raster")
#lambda = 5,R = 0.05,
L5 = rM3.disc.const(lambda = 5,R = 0.05, W = owin(c(0,10),c(0,10)) )
BW.L5 = digitizeDiscSys(L5,spacing = 0.025)
display(BW.L5, method = "raster")
#lambda = 10,R = 0.05,
L10 = rM3.disc.const(lambda = 10,R = 0.05, W = owin(c(0,10),c(0,10)) )
BW.L10 = digitizeDiscSys(L10,spacing = 0.025)
display(BW.L10, method = "raster")
# lambda = 15,R = 0.05,
L15 = rM3.disc.const(lambda = 15,R = 0.05, W = owin(c(0,10),c(0,10)) )
BW.L15 = digitizeDiscSys(L15,spacing = 0.025)
display(BW.L15, method = "raster")
source("fcts.r")
setwd("C:/Users/Anaconda/Rscripts/StoMe/project/t2")
source("fcts.r")
library(EBImage)
library(spatstat)
library(bitops)
#load image
img = readImage("image1_03.png")
display(img, method = "raster")
source("fcts.r")
library(EBImage)
library(spatstat)
library(bitops)
#load image
img = readImage("image1_03.png")
display(img, method = "raster")
pxl = 0.025 #pixel length
#loop through possible vals of pix size of b
for (px in c(1, 2.1, 2.5,3.3,4.1,4.3,4.7)){
brush = makeBrush(size= px, shape='disc')
i = EBImage::opening(img, brush )
display(i,  method = "raster")
writeImage(i,paste("img ", px*pxl,".png")) #save each img for each size of b
print(px)
}
# 4.1 seems to be right number of pixels
b = pxl *4.1
b
brush = makeBrush(size= b/pxl, shape='disc')
display(img, method = "raster")
display(EBImage::opening(img, brush ), method = "raster")
#Seems like value of b is between 10 and 11.
paste("Size of b is ", b)
setwd("C:/Users/Anaconda/Rscripts/StoMe/project/t2")
source("fcts.r")
library(EBImage)
library(spatstat)
library(bitops)
#### Additional Functions ####
# EDT
estAAbyEDT <- function(BW, m=0, spacing=1) {
rr <- 0:m
d <- dim(BW)
BW.EDT <- EBImage::distmap(1-BW) # EDT
AA <- sapply(rr, function(r) mean((BW.EDT[(1+r):(d[1]-r),(1+r):(d[2]-r)]<=r)@.Data))
cbind(r=rr*spacing, AA.EDT=AA, Hs.EDT=(AA-AA[1])/(1-AA[1]))
}
# The following function 'getAA.rect.const' generates 'nrep' repetitions of a 2D Boolean model
# with some intensity 'lambda' and typical grain equal to a constant rectangle of A x B
# and each time estimates the first Minkowski function A_A(r).
getAA.rect.const <- function(nrep = 39, lambda, a, b, W = owin(c(0,1),c(0,1)), m=0, spacing=1) {
sapply(1:nrep, function(k) {
XYR <- rBM.rect.const(lambda=lambda, a=a,b = b, W=W)
BW.XYR <- digitizeRectSys(XYR, spacing=spacing)
estAAbyEDT(BW=BW.XYR, m=m, spacing=spacing)[,2]
})
}
####Part 2 ####
alpha = 0.05
m = 40
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys(M1, spacing=0.025)
display(img.M1,method = "raster")
# 999 realizations of model 1
M1.model.999 <- getAA.rect.const(nrep=999, lambda=4.7, a = 1.71,b=0.15, W = owin(c(0,10),c(0,10)), m=m, spacing=0.025)
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys(M1, spacing=0.025)
display(img.M1,method = "raster")
# 999 realizations of model 1
M1.model.999 <- getAA.rect.const(nrep=999, lambda=4.7, a = 1.71,b=0.15, W = owin(c(0,10),c(0,10)), m=m, spacing=0.025)
#global envelopes
M1.genv.999 <- globalEnvelopes(M1.model.999, alpha=alpha)
M1.genv.999
#plot
png(file = "Envelopes_model1.png", width = 480, height = 480)
plot(M1.data[,1], M1.data[,2], type="l", xlab="r", ylab=expression(paste(A[A],"(r)",sep="")), lwd=2, ylim=c(0.4,1))
# Estimates of the first Minkowski func
M1.data <-estALXFct(BW=img.M1, m=m, spacing=0.025)[,1:2]
plot(M1.data[,1], M1.data[,2], type="l", xlab="r", ylab=expression(paste(A[A],"(r)",sep="")), lwd=2, ylim=c(0.4,1))
lines(M1.data[,1], M1.genv.999[,1], lwd=2, col=2) # red
lines(M1.data[,1], M1.genv.999[,2], lwd=2, col=2) # red
plot(M1.data[,1], M1.data[,2], type="l", xlab="r", ylab=expression(paste(A[A],"(r)",sep="")), lwd=2, ylim=c(0.4,1))
lines(M1.data[,1], M1.genv.999[,1], lwd=2, col=2) # red
lines(M1.data[,1], M1.genv.999[,2], lwd=2, col=2) # red
setwd("C:/Users/Anaconda/Rscripts/StoMe/project/t2")
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys(M1, spacing=0.025)
# The following function 'getAA.rect.const' generates 'nrep' repetitions of a 2D Boolean model
# with some intensity 'lambda' and typical grain equal to a constant rectangle of A x B
# and each time estimates the first Minkowski function A_A(r).
getAA.rect.const <- function(nrep = 39, lambda, a, b, W = owin(c(0,1),c(0,1)), m=0, spacing=1) {
sapply(1:nrep, function(k) {
XYR <- rBM.rect.const(lambda=lambda, a=a,b = b, W=W)
BW.XYR <- digitizeRectSys(XYR, spacing=spacing)
estAAbyEDT(BW=BW.XYR, m=m, spacing=spacing)[,2]
})
}
(
#### Additional Functions ####
# EDT
estAAbyEDT <- function(BW, m=0, spacing=1) {
rr <- 0:m
d <- dim(BW)
BW.EDT <- EBImage::distmap(1-BW) # EDT
AA <- sapply(rr, function(r) mean((BW.EDT[(1+r):(d[1]-r),(1+r):(d[2]-r)]<=r)@.Data))
cbind(r=rr*spacing, AA.EDT=AA, Hs.EDT=(AA-AA[1])/(1-AA[1]))
}
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys(M1, spacing=0.025)
display(img.M1,method = "raster")
library(EBImage)
library(spatstat)
library(bitops)
M1 = rBM.rect.const(lambda = 4.7,a = 1.71, b = 0.15)
img.M1 = digitizeRectSys(M1, spacing=0.025)
display(img.M1,method = "raster")
# 999 realizations of model 1
M1.model.999 <- getAA.rect.const(nrep=999, lambda=4.7, a = 1.71,b=0.15, W = owin(c(0,10),c(0,10)), m=m, spacing=0.025)
# Estimates of the first Minkowski func
M1.data <-estALXFct(BW=img.M1, m=m, spacing=0.025)
M1.data
#global envelopes
M1.genv.999 <- globalEnvelopes(M1.model.999, alpha=alpha)
M1.genv.999
plot(M1.data[,1], M1.data[,2], type="l", xlab="r", ylab=expression(paste(A[A],"(r)",sep="")), lwd=2, ylim=c(0.4,1))
lines(M1.data[,1], M1.genv.999[,1], lwd=2, col=2) # red
lines(M1.data[,1], M1.genv.999[,2], lwd=2, col=2) # red
#p values
p.values1 <- sapply(1:1000, function(k) {
M1 = rBM.rect.const(lambda = 5.1,a = 1.98, b = 0.11)
img.M1 = digitizeRectSys(M1, spacing=0.025)
M1.data <- estALXFct(BW=img.M1, m=m, spacing=0.025)[,1:2]
globalTest(M1.data[,2], M1.model.999)
})
p.values1 # shows all p-values
mean(p.values1<alpha)
#plot
png(file = "Envelopes_model1_estalx.png", width = 480, height = 480)
plot(M1.data[,1], M1.data[,2], type="l", xlab="r", ylab=expression(paste(A[A],"(r)",sep="")), lwd=2, ylim=c(0.4,1))
lines(M1.data[,1], M1.genv.999[,1], lwd=2, col=2) # red
lines(M1.data[,1], M1.genv.999[,2], lwd=2, col=2) # red
dev.off()
####* Model 2 ####
M2 = rBM.rect.const(lambda = 5.1,a = 1.98, b = 0.11)
img.M2 = digitizeRectSys(M2, spacing=0.025)
display(img.M2,method = "raster")
# 999 realizations of model 2
M2.model.999 <- getAA.rect.const(nrep=999, lambda=4.7, a = 1.71,b=0.15,
W = owin(c(0,10),c(0,10)), m=m, spacing=0.025)
# Estimates of the first Minkowski func
M2.data <- estALXFct(BW=img.M2, m=m, spacing=0.025)
#global envelopes
M2.genv.999 <- globalEnvelopes(M2.model.999, alpha=alpha)
M2.genv.999
plot(M2.data[,1], M2.data[,2], type="l", xlab="r", ylab=expression(paste(A[A],"(r)",sep="")),
lwd=2, ylim=c(0.4,1),col=4)
lines(M2.data[,1], M2.genv.999[,1], lwd=2, col=2) # red
lines(M2.data[,1], M2.genv.999[,2], lwd=2, col=2) # red
#global test
p.values2 <- sapply(1:1000, function(k) {
M2 = rBM.rect.const(lambda = 5.1,a = 1.98, b = 0.11)
img.M2 = digitizeRectSys(M2, spacing=0.025)
M2.data <- estALXFct(BW=img.M2, m=m, spacing=0.025)[,1:2]
globalTest(M2.data[,2], M2.model.999)
})
p.values2 # shows all p-values
mean(p.values2<alpha)
#plot
png(file = "Envelopes_model2_estalx.png", width = 480, height = 480)
plot(M2.data[,1], M2.data[,2], type="l", xlab="r", ylab=expression(paste(A[A],"(r)",sep="")),
lwd=2, ylim=c(0.4,1),col=4)
lines(M2.data[,1], M2.genv.999[,1], lwd=2, col=2) # red
lines(M2.data[,1], M2.genv.999[,2], lwd=2, col=2) # red
dev.off()
